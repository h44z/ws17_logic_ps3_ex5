///////////// BROWSER RELATED STUFF....

var colors = ["red", "green", "blue"];

function dimacsCallback (dimacsOutput) {
	document.getElementById('dimacsout').value = dimacsOutput;
}

function satCallback (satisfiable, valuations) {
	document.getElementById('satout').value = satisfiable ? "SATISFIABLE :)\n" : "UNSATISFIABLE :(\n";
	
	for(var i = 0; i < valuations.length; i++) {
		document.getElementById('satout').value = document.getElementById('satout').value + "\n" + valuations[i][0] + " => " + valuations[i][1];
	}
	
	updateMap(valuations);
}

function updateMap(valuations) {
	document.querySelector(".svgImage").getSVGDocument().getElementById("VORARLBERG").setAttribute("fill", getColor(valuations, 'v'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("TIROL").setAttribute("fill", getColor(valuations, 't'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("SALZBURG").setAttribute("fill", getColor(valuations, 's'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("KAERNTEN").setAttribute("fill", getColor(valuations, 'k'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("NIEDEROESTERREICH").setAttribute("fill", getColor(valuations, 'n'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("OBEROESTERREICH").setAttribute("fill", getColor(valuations, 'o'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("STEIERMARK").setAttribute("fill", getColor(valuations, 'm'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("BURGENLAND").setAttribute("fill", getColor(valuations, 'b'));
	document.querySelector(".svgImage").getSVGDocument().getElementById("WIEN").setAttribute("fill", getColor(valuations, 'w'));
}

function getColor(valuations, state) {
	for(var i=0; i < valuations.length; i++) {
		if(valuations[i][0].startsWith(state) && valuations[i][1] == 'T') {
			return colors[parseInt(valuations[i][0].substring(1))-1];
		}
	}
}

document.getElementById('gobtn').onclick = function(e) {
	
	var expression = document.getElementById('expinput').value;
	
	CNFSolver.cbDimacsDone = dimacsCallback;
	CNFSolver.cbSATSolveDone = satCallback;
	
	CNFSolver.init();
	CNFSolver.run(expression);
}

///////////// CNFSolver Class Object...

var CNFSolver = {
	_clauses: [],
	_variables: [],
	_satisfiable: false,
	_valuations: [],
	_done: false,
	
	_cnf: "",
	_dimacs: "",
	
	// callbacks
	cbDimacsDone: function() {},
	cbSATSolveDone: function() {},
	
	
	init: function() {
		this._clauses = [];
		this._variables = [];
		this._satisfiable = false;
		this._valuations = [];
		this._done = false;
		
		this._cnf = "";
		this._dimacs = "";
	
		Module.print = this._miniSATCallback.bind(this); // MiniSAT callback handler
	},
	
	run: function(cnf) {
		this._cnf = cnf;
		this._parseExpressionToDIMACS();
		this._SATsolve();
		setTimeout(this._miniSATFinishedCallback.bind(this), 500); // wait 500ms until finished
	},
	
	_parseExpressionToDIMACS: function () {
		var rgxVariables = /~?([a-z1-9]+)[\s\)\|]?/g;
		var rgxClauses = /(\([a-z0-9\s\|~]*\))/g;
		
		var matchesVariables;
		while(matchesVariables = rgxVariables.exec(this._cnf)) {
			if(!this._variables.includes(matchesVariables[1])) {
				this._variables.push(matchesVariables[1]);
			}
		}
		
		var matchesClauses;
		while(matchesClauses = rgxClauses.exec(this._cnf)) {
			// parse clause string
			// strip ( and )
			var clauseString = matchesClauses[1].replace(/\s+|\(+|\)+/g, '');
			var clauseVariables = clauseString.split('|');
			
			if(clauseVariables.length > 0) {
				var clause = [];
				for(var i = 0; i < clauseVariables.length; i++) {
					var negated = clauseVariables[i].startsWith('~') ? -1 : 1;
					
					clause.push(negated * (this._variables.indexOf(clauseVariables[i].replace('~', '')) + 1)); // + 1 as we want to start with 1
				}
				
				if(clause.length > 0) {
					this._clauses.push(clause);
				}
			}
			
		}
		
		this._dimacs = "c AUTOGENERATED DIMACS CNF!\nc\n";
		this._dimacs += "p cnf " + this._variables.length + " " + this._clauses.length + "\n";
		
		for(var i = 0; i < this._clauses.length; i++) {
			for(var j = 0; j < this._clauses[i].length; j++) {
				this._dimacs += this._clauses[i][j] + " ";
			}
			this._dimacs += "0\n";
		}
		
		this.cbDimacsDone(this._dimacs); // Call callback
	},

	_SATsolve: function () {
		if(this._dimacs == "") return; // skip parsing if no dimacs input is available
		
		htmlstuff = Module.cwrap('htmlstuff_c', 'int', ['string']);
		this._satisfiable = htmlstuff(this._dimacs) == 10 ? true : false;
	},

	_miniSATCallback: function(result) {
		this._done = true;
		var rgxResult = /^([0-9\-\s]+)$/g;
		var rgxVal = /([0-9\-]+)\s+/g;
		
		if(rgxResult.test(result)) { // it was satisfiable and has a valuation :)
			var variables = result.split(' ');
		
			for(var i = 0; i < variables.length; i++) {
				var variable = parseInt(variables[i].replace('-', '')) - 1;
				var valuation = variables[i].startsWith('-') ? 'F' : 'T';
				
				this._valuations.push([
					this._variables[variable], valuation
				]);
			}
		}
		
	},
	
	_miniSATFinishedCallback: function() {
		this.cbSATSolveDone(this._satisfiable, this._valuations); // Call callback
	}
};